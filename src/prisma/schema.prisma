datasource db {
  provider = "sqlite"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

////////////////////////////////////////////////////////////////////////////////
//  1. Person & User (1-to-1 relationship), with Roles assigned to the User
////////////////////////////////////////////////////////////////////////////////

model Person {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relatie naar User
  user        User?

  // Relatie naar Doctor (exact 0 of 1)
  doctor      Doctor?

  // Alle activiteiten
  activities  Activity[]

  // User-constraints
  userConstraints UserConstraint[]
}

model User {
  personId String @id
  email    String @unique
  password String

  // 1-to-1 relationship with Person
  person Person @relation(fields: [personId], references: [id])

  // Roles via a join table (UserRole)
  userRoles UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resetToken  String?
  resetExpire DateTime?

  refreshTokens RefreshToken[]
}

////////////////////////////////////////////////////////////////////////////////
//  2. Roles (M:N with User)
////////////////////////////////////////////////////////////////////////////////

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  userRoles UserRole[]
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [personId])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

////////////////////////////////////////////////////////////////////////////////
//  3. RefreshToken (for login/passport-flow)
////////////////////////////////////////////////////////////////////////////////

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [personId])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

////////////////////////////////////////////////////////////////////////////////
//  4. ShiftType + ShiftTypeRate (time-based rates)
////////////////////////////////////////////////////////////////////////////////

model ShiftType {
  id   String @id @default(uuid())
  name String

  // Option A: only time & duration
  startHour       Int // 0..23
  startMinute     Int // 0..59
  durationMinutes Int // e.g. 720 = 12 hours

  // Data to manage the lifecycle of this shift-type
  activeFrom  DateTime?
  activeUntil DateTime?

  // Multiple rate periods
  rates ShiftTypeRate[]

  // Relation to activities
  activities Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShiftTypeRate {
  id          String    @id @default(uuid())
  shiftTypeId String
  shiftType   ShiftType @relation(fields: [shiftTypeId], references: [id])

  rate       Float
  validFrom  DateTime
  validUntil DateTime? // null if no end date yet

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

////////////////////////////////////////////////////////////////////////////////
//  5. Activity (shifts, leave, conference, etc.)
////////////////////////////////////////////////////////////////////////////////

model Activity {
  id           String   @id @default(uuid())
  activityType String // "SHIFT", "LEAVE", "CONFERENCE", etc.
  start        DateTime
  end          DateTime
  status       String   @default("SCHEDULED") // "SCHEDULED", "COMPLETED", "CANCELLED", etc.

  // Relation to the person (doctor/nurse/etc.)
  personId String
  person   Person @relation(fields: [personId], references: [id])

  // Optional link to ShiftType (if this activity is a SHIFT)
  shiftTypeId String?
  shiftType   ShiftType? @relation(fields: [shiftTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

////////////////////////////////////////////////////////////////////////////////
//  6. (Optional) Personal constraints (UserConstraint)
////////////////////////////////////////////////////////////////////////////////

model UserConstraint {
  id       String @id @default(uuid())
  personId String
  person   Person @relation(fields: [personId], references: [id])

  maxNightShiftsPerWeek     Int?
  maxConsecutiveNightShifts Int?
  minRestHoursBetweenShifts Int?
  // etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

////////////////////////////////////////////////////////////////////////////////
//  7. Doctor (1-op-1 met Person)
////////////////////////////////////////////////////////////////////////////////

model Doctor {
  /// Zelfde PK als Person.id
  personId         String   @id
  person           Person   @relation(fields: [personId], references: [id])

  /// Belgisch RIZIV-nummer, exact 11 karakters
  rizivNumber      String   @unique

  /// Of de arts meegenomen wordt in de shift-planning
  isEnabledInShifts Boolean  @default(true)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}