/**
 * @description
 * The Prisma schema that defines the database structure for the application.
 * 
 * Key Features:
 * - Uses MS SQL Server as the datasource
 * - Defines the User model for authentication (email & password)
 * - Defines optional RefreshToken model for storing refresh tokens in DB
 * - Supports role-based access through an enum: ADMIN, USER
 * 
 * @notes
 * - Adjust the models as needed if your DB structure changes
 * - The 'datasource db' is configured to read DB_URL from environment variables
 * 
 * Additional Info:
 * - This file is updated in Step 2 to define the relevant models for the application
 */

datasource db {
  provider = "sqlserver"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * The User model stores registered users with secure (hashed) passwords
 * 
 * Fields:
 * - id: Primary key, defaulting to a generated UUID
 * - email: Unique email identifier for each user
 * - password: Bcrypt-hashed password
 * - role: The user's role, either ADMIN or USER
 * - createdAt: Timestamp indicating when the user was created
 * - updatedAt: Timestamp automatically updated on user record changes
 * - resetToken: A token for password reset flows (nullable)
 * - resetExpire: Timestamp indicating when the resetToken expires (nullable)
 *
 * @role-based
 *   - For role-based security, the "role" field is used
 *   - The Role enum is defined below as ADMIN or USER
 *
 * @notes
 *   - The "updatedAt" field uses @updatedAt to automatically set the field's value
 *   - The "resetToken" and "resetExpire" fields are optional, used for password-reset flows
 */

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  role        String    @default("USER")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resetToken  String?
  resetExpire DateTime?
  refreshTokens RefreshToken[]
}


/**
 * The RefreshToken model (OPTIONAL) stores refresh tokens in the database.
 * 
 * Fields:
 * - id: Primary key, defaults to a generated UUID
 * - token: A unique string representing the refresh token
 * - userId: Foreign key referencing the User model
 * - user: Relation to the User model
 * - expiresAt: Timestamp for when the token is no longer valid
 * - createdAt: Timestamp indicating when the refresh token record was created
 *
 * @notes
 *   - This model is optional, only if you wish to store refresh tokens in DB for revocation
 */

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

/**
 * The Role enum supports two distinct roles: ADMIN and USER.
 * 
 * @notes
 * - Additional roles can be added if needed (e.g., SUPER_ADMIN)
 */

model Role {
  id    String @id @default(uuid())
  name  String @unique
}

